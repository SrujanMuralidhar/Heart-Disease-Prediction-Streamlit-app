# -*- coding: utf-8 -*-
"""HeartDiseasePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AUUvrh5fyrnowkeyUO-T83nHWKBAm6TZ
"""

# Importing the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder,OneHotEncoder,StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix,accuracy_score

# Data preprocessing

df = pd.read_csv("heart.csv.xls")
df.head()

df.info()

df.describe()

df.isnull().sum()

df_headers = np.array(df.columns)
print(df_headers)

print(pd.unique(df["Sex"]))

print(pd.unique(df["ChestPainType"]))
chestPain_map = dict()

for i in range(0,len(pd.unique(df["ChestPainType"]))):
  if pd.unique(df["ChestPainType"])[i] not in chestPain_map:
    chestPain_map[i] = pd.unique(df["ChestPainType"])[i]

print(chestPain_map)

for i in range(0,len(df["ChestPainType"])):
  for k,v in chestPain_map.items():
     if v == df["ChestPainType"][i]:
        df["ChestPainType"][i] = k

print(df["ChestPainType"])

print(pd.unique(df['RestingECG']))
restingECG_map = dict()

for i in range(0,len(pd.unique(df["RestingECG"]))):
  if pd.unique(df["RestingECG"])[i] not in restingECG_map:
    restingECG_map[i] = pd.unique(df["RestingECG"])[i]

print(restingECG_map)

for i in range(0,len(df["RestingECG"])):
  for k,v in restingECG_map.items():
     if v == df["RestingECG"][i]:
        df["RestingECG"][i] = k

print(df["RestingECG"])

print(pd.unique(df["ExerciseAngina"]))

print(pd.unique(df["ST_Slope"]))
st_slope_map = dict()

for i in range(0,len(pd.unique(df["ST_Slope"]))):
  if pd.unique(df["ST_Slope"])[i] not in st_slope_map:
    st_slope_map[i] = pd.unique(df["ST_Slope"])[i]

print(st_slope_map)

for i in range(0,len(df["ST_Slope"])):
  for k,v in st_slope_map.items():
     if v == df["ST_Slope"][i]:
        df["ST_Slope"][i] = k

print(df["ST_Slope"])

# Encoding the categorical variables

label_encoder_s = LabelEncoder()
label_encoder_e = LabelEncoder()
df["Sex"] = label_encoder_s.fit_transform(df["Sex"])
df["ExerciseAngina"] = label_encoder_e.fit_transform(df["ExerciseAngina"])

X = df.iloc[:,:-1].values
y = df.iloc[:,-1].values

df.head()

X.shape

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state = 0)

# Feature Scaling

sc_x = StandardScaler()
X_train = sc_x.fit_transform(X_train)
X_test =  sc_x.transform(X_test)

df.head()

"""# LOGISTIC REGRESSION"""

log_regressor = LogisticRegression()
log_regressor.fit(X_train,y_train)

y_log_pred = log_regressor.predict(X_test)

"""#K Nearest Neighbors

"""

knn_classifier = KNeighborsClassifier(n_neighbors=15,metric = "minkowski")
knn_classifier.fit(X_train,y_train)

y_knn_pred = knn_classifier.predict(X_test)

"""# Naive Baye's

"""

nb_classifier = GaussianNB()
nb_classifier.fit(X_train,y_train)

y_nb_pred = nb_classifier.predict(X_test)

"""# Support Vector Classifier

"""

svc_classifier = SVC(kernel = "rbf")
svc_classifier.fit(X_train,y_train)

y_svc_pred = svc_classifier.predict(X_test)

"""#Decision Tree Classifier"""

dt_classifier = DecisionTreeClassifier(random_state=0)
dt_classifier.fit(X_train,y_train)

y_dt_pred = dt_classifier.predict(X_test)

"""# Random Forest Classifier"""

rf_classifier = RandomForestClassifier(n_estimators=100,random_state=0)
rf_classifier.fit(X_train,y_train)

y_rf_pred = rf_classifier.predict(X_test)

y_pred = [y_log_pred,y_knn_pred,y_nb_pred,y_dt_pred,y_rf_pred,y_svc_pred]
names = ["Logistic Regression","KNearest Neighbors Classifier","Naive Baye's Classifier","Decision Tree Classifier","Random Forest Classifier","Support Vecotr Classifier"]

for i in range(0,len(y_pred)):
  print("The confusion matrix for ",names[i]," is :\n",confusion_matrix(y_test,y_pred[i]))

accuracy = []
for i in range(0,len(y_pred)):
  accuracy.append(accuracy_score(y_test,y_pred[i]))
  print("The accuracy score for ",names[i]," is :",accuracy_score(y_test,y_pred[i]))